from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from services.user_service import get_or_create_user, update_user_status
from keyboards.user import user_main_menu, user_profile_keyboard, user_reply_menu
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from models.user import BalanceHistory
from core.db import async_session
from datetime import datetime, timedelta
from core.config import settings

router = Router()

class EditProfile(StatesGroup):
    fio = State()
    age = State()

class WithdrawFSM(StatesGroup):
    amount = State()
    requisites = State()
    confirm = State()

@router.callback_query(F.data == "profile")
async def show_profile_cb(call: CallbackQuery, state: FSMContext):
    user = await get_or_create_user(call.from_user.id)
    from sqlalchemy import select
    from datetime import datetime, timedelta
    async with async_session() as session:
        result = await session.execute(
            select(BalanceHistory)
            .where(BalanceHistory.user_id == user.id, BalanceHistory.type == "–≤—ã–≤–æ–¥")
            .order_by(BalanceHistory.created_at.desc())
        )
        history = result.scalars().all()
    now = datetime.utcnow()
    for row in history:
        async with async_session() as session2:
            cancel_result = await session2.execute(
                select(BalanceHistory)
                .where(BalanceHistory.user_id == row.user_id, BalanceHistory.type == "–æ—Ç–º–µ–Ω–∞ –≤—ã–≤–æ–¥–∞", BalanceHistory.change == abs(row.change))
            )
            cancel_hist = cancel_result.scalar_one_or_none()
            if cancel_hist:
                continue
        if (now - row.created_at).total_seconds() > 86400:
            try:
                await call.message.edit_text("<b>‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:</b> –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ <b>–µ—â—ë –Ω–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞</b>. –ï—Å–ª–∏ —ç—Ç–æ –∑–∞–π–º—ë—Ç –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", parse_mode="HTML")
            except Exception:
                await call.message.answer("<b>‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:</b> –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ <b>–µ—â—ë –Ω–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞</b>. –ï—Å–ª–∏ —ç—Ç–æ –∑–∞–π–º—ë—Ç –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", parse_mode="HTML")
            break
    text = f"<b>üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n<b>–§–ò–û:</b> {user.fio or '‚Äî'}\n<b>–í–æ–∑—Ä–∞—Å—Ç:</b> {user.age or '‚Äî'}\n<b>üí∞ –ë–∞–ª–∞–Ω—Å:</b> <b>{user.balance} ‚ÇΩ</b>"
    kb = user_profile_keyboard()
    try:
        await call.message.edit_text(text, reply_markup=kb, parse_mode="HTML")
    except Exception:
        await call.message.answer(text, reply_markup=kb, parse_mode="HTML")
    await call.answer()

@router.callback_query(F.data == "withdraw")
async def withdraw_request(call: CallbackQuery, state: FSMContext):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="profile")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    try:
        await call.message.edit_text("üí∏ <b>–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞:</b>", reply_markup=kb, parse_mode="HTML")
    except Exception:
        await call.message.answer("üí∏ <b>–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞:</b>", reply_markup=kb, parse_mode="HTML")
    await state.set_state(WithdrawFSM.amount)
    await call.answer()

@router.message(WithdrawFSM.amount)
async def withdraw_amount(message: Message, state: FSMContext):
    user = await get_or_create_user(message.from_user.id)
    if not message.text.isdigit() or int(message.text) <= 0:
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="profile"), InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close_notify")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        await message.edit_text("‚ùóÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É:</b>", reply_markup=kb, parse_mode="HTML")
        return
    amount = int(message.text)
    if amount < 100:
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="profile"), InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close_notify")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        await message.edit_text("‚ùóÔ∏è <b>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ ‚Äî 100 ‚ÇΩ</b>", reply_markup=kb, parse_mode="HTML")
        return
    if amount > user.balance:
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="profile"), InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close_notify")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        await message.edit_text("‚ùóÔ∏è <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ!</b>", reply_markup=kb, parse_mode="HTML")
        return
    await state.update_data(amount=amount)
    await message.edit_text("üí≥ <b>–í–≤–µ–¥–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –≤—ã–≤–æ–¥–∞ (–Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã, —Ç–µ–ª–µ—Ñ–æ–Ω –∏ —Ç.–¥.):</b>", reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]), parse_mode="HTML")
    await state.set_state(WithdrawFSM.requisites)

@router.message(WithdrawFSM.requisites)
async def withdraw_requisites(message: Message, state: FSMContext):
    await state.update_data(requisites=message.text)
    data = await state.get_data()
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="profile"), InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close_notify")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    await message.edit_text(f"<b>üí∏ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞—è–≤–∫—É –Ω–∞ –≤—ã–≤–æ–¥:</b>\n–°—É–º–º–∞: <b>{data['amount']}</b> ‚ÇΩ\n–†–µ–∫–≤–∏–∑–∏—Ç—ã: <b>{data['requisites']}</b>\n\n–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É? (–¥–∞/–Ω–µ—Ç)", parse_mode="HTML", reply_markup=kb)
    await state.set_state(WithdrawFSM.confirm)

@router.message(WithdrawFSM.confirm)
async def withdraw_confirm(message: Message, state: FSMContext):
    if message.text.lower() not in ["–¥–∞", "yes", "+"]:
        await message.edit_text("‚ùå <b>–ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.</b>", reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]), parse_mode="HTML")
        await state.clear()
        return
    data = await state.get_data()
    user = await get_or_create_user(message.from_user.id)
    async with async_session() as session:
        hist = BalanceHistory(user_id=user.id, change=-int(data['amount']), type="–≤—ã–≤–æ–¥", comment=data['requisites'], created_at=datetime.utcnow())
        user.balance -= int(data['amount'])
        session.add(hist)
        await session.merge(user)
        await session.commit()
    await message.edit_text("‚úÖ <b>–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!</b>\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. üïì", parse_mode="HTML", reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]))
    await state.clear()
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_withdraw_{user.tg_id}_{data['amount']}")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_withdraw_{user.tg_id}_{data['amount']}")]
    ])
    for admin_id in settings.ADMIN_IDS:
        try:
            await message.bot.send_message(
                admin_id,
                f"<b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥!</b>\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <code>{user.fio or user.tg_id}</code>\nID: <code>{user.tg_id}</code>\n–°—É–º–º–∞: <b>{data['amount']} ‚ÇΩ</b>\n–†–µ–∫–≤–∏–∑–∏—Ç—ã: <b>{data['requisites']}</b>",
                reply_markup=kb,
                parse_mode="HTML"
            )
        except Exception:
            pass

@router.callback_query(F.data == "balance_history")
async def show_balance_history(call: CallbackQuery):
    user = await get_or_create_user(call.from_user.id)
    async with async_session() as session:
        result = await session.execute(
            BalanceHistory.__table__.select().where(BalanceHistory.user_id == user.id).order_by(BalanceHistory.created_at.desc()).limit(10)
        )
        history = result.fetchall()
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="profile"), InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close_notify")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    if not history:
        try:
            await call.message.edit_text("<b>üìä –ò—Å—Ç–æ—Ä–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø—É—Å—Ç–∞.</b>", reply_markup=kb, parse_mode="HTML")
        except Exception:
            await call.message.answer("<b>üìä –ò—Å—Ç–æ—Ä–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø—É—Å—Ç–∞.</b>", reply_markup=kb, parse_mode="HTML")
        await call.answer()
        return
    text = "<b>üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:</b>\n"
    for row in history:
        msk_time = row.created_at + timedelta(hours=3)
        emoji = "‚ûï" if row.change > 0 else "‚ûñ"
        text += f"{msk_time.strftime('%d.%m %H:%M')} (–ú–°–ö) | {row.type} | {emoji} {abs(row.change)} ‚ÇΩ | {row.comment or ''}\n"
    try:
        await call.message.edit_text(text, parse_mode="HTML", reply_markup=kb)
    except Exception:
        await call.message.answer(text, parse_mode="HTML", reply_markup=kb)
    await call.answer()

@router.callback_query(F.data == "my_withdraw_requests")
async def show_my_withdraw_requests(call: CallbackQuery):
    user = await get_or_create_user(call.from_user.id)
    from models.user import BalanceHistory
    from sqlalchemy import select, desc
    async with async_session() as session:
        result = await session.execute(
            select(BalanceHistory)
            .where(BalanceHistory.user_id == user.id, BalanceHistory.type == "–≤—ã–≤–æ–¥")
            .order_by(desc(BalanceHistory.created_at))
        )
        history = result.scalars().all()
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="profile"), InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close_notify")],
        [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    if not history:
        try:
            await call.message.edit_text("<b>–£ –≤–∞—Å –Ω–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥.</b> üïì", parse_mode="HTML", reply_markup=kb)
        except Exception:
            await call.message.answer("<b>–£ –≤–∞—Å –Ω–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥.</b> üïì", parse_mode="HTML", reply_markup=kb)
        await call.answer()
        return
    text = "<b>–í–∞—à–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥:</b>\n"
    for row in history:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
        status = "üïì –í –ø—Ä–æ—Ü–µ—Å—Å–µ"
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–º–µ–Ω—É
        cancel = False
        async with async_session() as session2:
            cancel_result = await session2.execute(
                select(BalanceHistory)
                .where(BalanceHistory.user_id == row.user_id, BalanceHistory.type == "–æ—Ç–º–µ–Ω–∞ –≤—ã–≤–æ–¥–∞", BalanceHistory.change == abs(row.change))
            )
            cancel_hist = cancel_result.scalar_one_or_none()
            if cancel_hist:
                status = "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–∞"
                cancel = True
        if not cancel:
            # –ï—Å–ª–∏ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ–¥–æ–±—Ä–µ–Ω–∞ (–ø–æ –ª–æ–≥–∏–∫–µ ‚Äî –µ—Å–ª–∏ change < 0 –∏ –Ω–µ—Ç –æ—Ç–º–µ–Ω—ã, –∑–Ω–∞—á–∏—Ç –æ–¥–æ–±—Ä–µ–Ω–∞ –≤—Ä—É—á–Ω—É—é)
            # –ù–æ –≤ —Ç–µ–∫—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–µ—Ç —è–≤–Ω–æ–≥–æ –ø—Ä–∏–∑–Ω–∞–∫–∞, –ø–æ—ç—Ç–æ–º—É –æ—Å—Ç–∞–≤–ª—è–µ–º "–í –ø—Ä–æ—Ü–µ—Å—Å–µ" –¥–æ —Ä—É—á–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
            pass
        msk_time = row.created_at + timedelta(hours=3)
        text += f"<b>{abs(row.change)} ‚ÇΩ</b> | {row.comment or ''} | {msk_time.strftime('%d.%m %H:%M')} (–ú–°–ö) | <b>{status}</b>\n"
    try:
        await call.message.edit_text(text, parse_mode="HTML", reply_markup=kb)
    except Exception:
        await call.message.answer(text, parse_mode="HTML", reply_markup=kb)
    await call.answer()

@router.callback_query(F.data == "close_notify")
async def close_notify(call: CallbackQuery):
    try:
        await call.message.delete()
    except Exception:
        pass
    await call.answer()


@router.callback_query(F.data == "main_menu")
async def main_menu_cb(call: CallbackQuery):
    try:
        await call.message.edit_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=user_main_menu())
    except Exception:
        await call.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=user_main_menu())
    await call.answer()
