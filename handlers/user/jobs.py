from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from services.job_service import get_jobs, apply_for_job
from keyboards.user import user_main_menu
import calendar

RU_MONTHS = [
    '', '—è–Ω–≤–∞—Ä—è', '—Ñ–µ–≤—Ä–∞–ª—è', '–º–∞—Ä—Ç–∞', '–∞–ø—Ä–µ–ª—è', '–º–∞—è', '–∏—é–Ω—è',
    '–∏—é–ª—è', '–∞–≤–≥—É—Å—Ç–∞', '—Å–µ–Ω—Ç—è–±—Ä—è', '–æ–∫—Ç—è–±—Ä—è', '–Ω–æ—è–±—Ä—è', '–¥–µ–∫–∞–±—Ä—è'
]

router = Router()


@router.callback_query(F.data == "jobs")
async def show_jobs_cb(call: CallbackQuery):
    jobs = await get_jobs()
    if not jobs:
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")],
            [InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close_notify")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        await call.message.answer("–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π –ø–æ–∫–∞ –ø—É—Å—Ç", reply_markup=kb)
        await call.answer()
        return
    for job in jobs:
        text = f"<b>{job.title}</b>\n{job.description}\n–û–ø–ª–∞—Ç–∞: {job.pay}\n–ù—É–∂–Ω–æ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤: {job.workers_needed}\n–ó–∞–ø–∏—Å–∞–Ω–æ: {len(job.workers.split(',')) if job.workers else 0}"
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úã –û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è", callback_data=f"apply_{job.id}")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu"), InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close_notify")],
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        if job.photo:
            await call.message.answer_photo(job.photo, caption=text, reply_markup=kb)
        else:
            await call.message.answer(text, reply_markup=kb)
    await call.answer()


@router.callback_query(F.data == "close_notify")
async def close_notify(call: CallbackQuery):
    try:
        await call.message.delete()
    except Exception:
        pass
    await call.answer()


@router.callback_query(F.data.startswith("apply_"))
async def apply_job(call: CallbackQuery):
    job_id = int(call.data.split("_")[1])
    from services.job_service import get_job
    job = await get_job(job_id)
    from services.user_service import get_or_create_user
    user = await get_or_create_user(call.from_user.id)
    if user.age is None or user.age < job.min_age or user.age > job.max_age:
        await call.answer(f"‚ùóÔ∏è–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è! (–¥–æ–ø—É—Å—Ç–∏–º–æ: {job.min_age}-{job.max_age})",
                          show_alert=True)
        return
    ok = await apply_for_job(job_id, call.from_user.id)
    if ok:
        await call.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª–∏–∫–Ω—É–ª–∏—Å—å –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ!", show_alert=True)
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ
        from core.config import settings
        if settings.WORKERS_CHAT_ID and call.message.chat.id == settings.WORKERS_CHAT_ID:
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ job –ø–æ—Å–ª–µ –∑–∞–ø–∏—Å–∏
            job = await get_job(job_id)
            total = job.workers_needed
            ids = job.workers.split(',') if job.workers else []
            taken = len(ids)
            free = total - taken
            places = ' '.join(['üü•'] * taken + ['üü©'] * free)
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
            day = job.start_time.day
            month = RU_MONTHS[job.start_time.month]
            start_time_str = job.start_time.strftime('%H:%M')
            end_time_str = job.end_time.strftime('%H:%M')
            date_str = f"{day} {month} {start_time_str} - {end_time_str}"
            text = (f"<b>üìù –ù–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ!</b>\n"
                    f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {job.title}\n"
                    f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {job.description}\n"
                    f"<b>–ê–¥—Ä–µ—Å:</b> {job.address}\n"
                    f"<b>–û–ø–ª–∞—Ç–∞:</b> {job.pay} ‚ÇΩ\n"
                    f"<b>–í–æ–∑—Ä–∞—Å—Ç:</b> {job.min_age} - {job.max_age if job.max_age != 99 else '–±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π'}\n"
                    f"<b>–í—Ä–µ–º—è:</b> {date_str}\n"
                    f"<b>–ú–µ—Å—Ç:</b> {total}\n"
                    f"<b>–°–≤–æ–±–æ–¥–Ω–æ:</b> {places}")
            from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
            kb = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úã –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data=f"apply_{job.id}")]
            ])
            try:
                await call.message.edit_text(text, reply_markup=kb, parse_mode="HTML")
            except Exception:
                pass
    else:
        await call.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è (–≤–æ–∑–º–æ–∂–Ω–æ, –≤—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –∏–ª–∏ –º–µ—Å—Ç –Ω–µ—Ç)", show_alert=True)
