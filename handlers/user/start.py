from aiogram import Router, F
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from services.user_service import get_or_create_user, update_user_status
from core.config import settings
from keyboards.user import user_main_menu
from keyboards.admin import admin_main_menu

router = Router()

class Registration(StatesGroup):
    fio = State()
    age = State()
    passport = State()

@router.message(Command("start"))
async def start_cmd(message: Message, state: FSMContext):
    user = await get_or_create_user(message.from_user.id)
    if user.is_admin or message.from_user.id in settings.ADMIN_IDS:
        from keyboards.admin import admin_reply_menu
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!", reply_markup=admin_main_menu())
        await message.answer("–î–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.", reply_markup=admin_reply_menu())
        return
    if user.is_blocked:
        await message.answer("–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    if not user.is_approved:
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close_notify")]
        ])
        await message.answer("<b>üìã –ü—Ä–∞–≤–∏–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:</b>\n\n–Ø –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é, —á—Ç–æ –º–Ω–µ –µ—Å—Ç—å <b>16 –ª–µ—Ç</b>. –ó–∞ –ª–æ–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ ‚Äî <b>–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –±–µ–∑ –æ–ø–ª–∞—Ç—ã</b>.\n\n–ü—Ä–æ–¥–æ–ª–∂–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å —ç—Ç–∏–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏. ‚ö†Ô∏è", parse_mode="HTML", reply_markup=kb)
        await message.answer("<b>‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –§–ò–û:</b>", parse_mode="HTML")
        await state.set_state(Registration.fio)
    else:
        from keyboards.user import user_main_menu, user_reply_menu
        await message.answer("<b>üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b> –í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏ –≤ –±–æ—Ç–∞!", reply_markup=user_main_menu(is_subscribed=user.is_subscribed), parse_mode="HTML")
        await message.answer("–î–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ. ‚¨áÔ∏è", reply_markup=user_reply_menu())

@router.callback_query(F.data == "close_notify")
async def close_notify(call: CallbackQuery):
    try:
        await call.message.delete()
    except Exception:
        pass
    await call.answer()

@router.message(Registration.fio)
async def reg_fio(message: Message, state: FSMContext):
    await state.update_data(fio=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç:")
    await state.set_state(Registration.age)

@router.message(Registration.age)
async def reg_age(message: Message, state: FSMContext):
    if not message.text.isdigit() or int(message.text) < 16:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º (–æ—Ç 16 –∏ —Å—Ç–∞—Ä—à–µ):")
        return
    await state.update_data(age=message.text)
    await message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –ø–∞—Å–ø–æ—Ä—Ç–∞ —Å –ª–∏—Ü–æ–º:")
    await state.set_state(Registration.passport)

@router.message(Registration.passport, F.photo)
async def reg_passport(message: Message, state: FSMContext):
    photo_id = message.photo[-1].file_id
    data = await state.get_data()
    await update_user_status(
        message.from_user.id,
        fio=data["fio"],
        age=int(data["age"]),
        passport_photo=photo_id,
        is_approved=False
    )
    await message.answer("<b>–°–ø–∞—Å–∏–±–æ!</b> üôè –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é. –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏—è. üïì", parse_mode="HTML")
    await state.clear()

@router.callback_query(F.data == "subscribe_jobs")
async def subscribe_jobs(call: CallbackQuery):
    from services.user_service import update_user_status, get_or_create_user
    await update_user_status(call.from_user.id, is_subscribed=True)
    from keyboards.user import user_main_menu
    user = await get_or_create_user(call.from_user.id)
    try:
        await call.message.edit_text("–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏—è—Ö!", reply_markup=user_main_menu(is_subscribed=True))
    except Exception:
        await call.message.answer("–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏—è—Ö!", reply_markup=user_main_menu(is_subscribed=True))
    await call.answer()

@router.callback_query(F.data == "unsubscribe_jobs")
async def unsubscribe_jobs(call: CallbackQuery):
    from services.user_service import update_user_status, get_or_create_user
    await update_user_status(call.from_user.id, is_subscribed=False)
    from keyboards.user import user_main_menu
    user = await get_or_create_user(call.from_user.id)
    try:
        await call.message.edit_text("–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏—è—Ö.", reply_markup=user_main_menu(is_subscribed=False))
    except Exception:
        await call.message.answer("–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏—è—Ö.", reply_markup=user_main_menu(is_subscribed=False))
    await call.answer()

@router.message(F.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def main_menu_text(message: Message):
    from services.user_service import get_or_create_user
    from keyboards.user import user_main_menu
    user = await get_or_create_user(message.from_user.id)
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=user_main_menu(is_subscribed=user.is_subscribed)) 