from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from sqlalchemy.future import select
from core.db import async_session
from models.user import User
from services.user_service import update_user_status
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter
from datetime import datetime, timedelta
from utils.misc import log_admin_action

router = Router()

@router.callback_query(F.data == "users")
async def open_users(call: CallbackQuery):
    await call.answer()
    await show_users(call.message)

@router.message(F.text == "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
async def show_users(message: Message):
    async with async_session() as session:
        result = await session.execute(select(User))
        users = result.scalars().all()
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=f"{u.fio or u.tg_id}", callback_data=f"user_{u.tg_id}")] for u in users
        ] + [[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_menu"), InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close_notify")]])
        if not users:
            try:
                await message.edit_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç.", reply_markup=kb)
            except Exception:
                await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç.", reply_markup=kb)
            return
        try:
            await message.edit_text("–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", reply_markup=kb)
        except Exception:
            await message.answer("–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", reply_markup=kb)

@router.callback_query(F.data.startswith("user_"))
async def user_info(call: CallbackQuery):
    tg_id = int(call.data.split("_")[1])
    async with async_session() as session:
        result = await session.execute(select(User).where(User.tg_id == tg_id))
        user = result.scalar_one_or_none()
        if not user:
            await call.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        text = f"<b>–§–ò–û:</b> {user.fio}\n<b>–í–æ–∑—Ä–∞—Å—Ç:</b> {user.age}\n<b>ID:</b> {user.tg_id}\n<b>–ë–∞–ª–∞–Ω—Å:</b> {user.balance} ‚ÇΩ\n–°—Ç–∞—Ç—É—Å: {'–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω' if user.is_blocked else '–ê–∫—Ç–∏–≤–µ–Ω'}"
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data=f"balance_add_{user.tg_id}"),
             InlineKeyboardButton(text="‚ûñ –®—Ç—Ä–∞—Ñ", callback_data=f"balance_fine_{user.tg_id}")],
            [InlineKeyboardButton(text="‚öôÔ∏è –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞", callback_data=f"balance_corr_{user.tg_id}")],
            [InlineKeyboardButton(text="üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–≤—Å–µ–≥–¥–∞", callback_data=f"block_forever_{user.tg_id}")],
            [InlineKeyboardButton(text="‚è≥ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ 1 –¥–µ–Ω—å", callback_data=f"block_1d_{user.tg_id}")],
            [InlineKeyboardButton(text="üîì –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"unblock_{user.tg_id}")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="users"), InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close_notify")]
        ])
        if user.passport_photo:
            try:
                await call.message.delete()
            except Exception:
                pass
            await call.message.answer_photo(user.passport_photo, caption=text, reply_markup=kb, parse_mode="HTML")
        else:
            try:
                await call.message.edit_text(text, reply_markup=kb, parse_mode="HTML")
            except Exception:
                await call.message.answer(text, reply_markup=kb, parse_mode="HTML")
        await call.answer()

@router.callback_query(F.data.startswith("block_forever_"))
async def block_forever(call: CallbackQuery):
    tg_id = int(call.data.split("_")[2])
    await update_user_status(tg_id, is_blocked=True)
    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    from models.user import AdminActionLog
    async with async_session() as session:
        log = AdminActionLog(admin_id=call.from_user.id, user_id=tg_id, action="block_forever", comment=None)
        session.add(log)
        await session.commit()
    await call.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞–≤—Å–µ–≥–¥–∞", show_alert=True)
    await call.message.edit_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞–≤—Å–µ–≥–¥–∞.")

@router.callback_query(F.data.startswith("block_1d_"))
async def block_1d(call: CallbackQuery):
    tg_id = int(call.data.split("_")[2])
    from datetime import datetime, timedelta
    async with async_session() as session:
        result = await session.execute(select(User).where(User.tg_id == tg_id))
        user = result.scalar_one_or_none()
        if user:
            user.is_blocked = True
            user.comment = f"unblock_at:{(datetime.utcnow() + timedelta(days=1)).isoformat()}"
            await session.merge(user)
            # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
            from models.user import AdminActionLog
            log = AdminActionLog(admin_id=call.from_user.id, user_id=tg_id, action="block_1d", comment=user.comment)
            session.add(log)
            await session.commit()
    await call.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞ 1 –¥–µ–Ω—å", show_alert=True)
    await call.message.edit_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞ 1 –¥–µ–Ω—å.")

@router.callback_query(F.data.startswith("unblock_"))
async def unblock_user(call: CallbackQuery):
    tg_id = int(call.data.split("_")[1])
    async with async_session() as session:
        result = await session.execute(select(User).where(User.tg_id == tg_id))
        user = result.scalar_one_or_none()
        if user:
            user.is_blocked = False
            user.comment = None
            await session.merge(user)
            # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
            from models.user import AdminActionLog
            log = AdminActionLog(admin_id=call.from_user.id, user_id=tg_id, action="unblock", comment=None)
            session.add(log)
            await session.commit()
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ
            try:
                await call.bot.send_message(tg_id, "–í–∞—à–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Å–Ω—è—Ç–∞. –í—ã —Å–Ω–æ–≤–∞ –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º! üéâ")
            except Exception:
                pass
    await call.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω", show_alert=True)
    await call.message.edit_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")

@router.callback_query(F.data.startswith("refs_"))
async def show_refs(call: CallbackQuery):
    tg_id = int(call.data.split("_")[1])
    async with async_session() as session:
        result = await session.execute(select(Referral).where(Referral.inviter_id == tg_id))
        refs = result.scalars().all()
        if not refs:
            await call.answer("–ù–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤", show_alert=True)
            return
        text = "–†–µ—Ñ–µ—Ä–∞–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"
        for ref in refs:
            user_result = await session.execute(select(User).where(User.tg_id == ref.invited_id))
            invited = user_result.scalar_one_or_none()
            if invited:
                text += f"- {invited.fio or invited.tg_id} (ID: {invited.tg_id})\n"
        await call.message.edit_text(text)

class BalanceChange(StatesGroup):
    action = State()
    amount = State()
    comment = State()
    user_id = State()

@router.callback_query(F.data.regexp(r"^balance_(add|fine|corr)_\d+"))
async def start_balance_change(call: CallbackQuery, state: FSMContext):
    _, action, user_id = call.data.split('_', 2)
    log_admin_action(call.from_user.id, f"balance_{action}", f"target_user_id={user_id}")
    await state.set_state(BalanceChange.amount)
    await state.update_data(action=action, user_id=user_id)
    if action == "add":
        await call.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:")
    elif action == "fine":
        await call.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —à—Ç—Ä–∞—Ñ–∞ (–±—É–¥–µ—Ç –≤—ã—á—Ç–µ–Ω–æ):")
    elif action == "corr":
        await call.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ (–º–æ–∂–µ—Ç –±—ã—Ç—å + –∏–ª–∏ -):")
    await call.answer()

@router.message(StateFilter(BalanceChange.amount))
async def balance_amount_entered(message: Message, state: FSMContext):
    data = await state.get_data()
    if not message.text.lstrip('-').isdigit():
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ):")
        return
    await state.update_data(amount=int(message.text))
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –æ–ø–µ—Ä–∞—Ü–∏–∏ (–∏–ª–∏ '-' –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–µ–Ω):")
    await state.set_state(BalanceChange.comment)

@router.message(StateFilter(BalanceChange.comment))
async def balance_comment_entered(message: Message, state: FSMContext):
    data = await state.get_data()
    user_id = int(data["user_id"])
    amount = int(data["amount"])
    comment = message.text if message.text != '-' else ''
    from core.db import async_session
    from models.user import User
    async with async_session() as session:
        result = await session.execute(select(User).where(User.tg_id == user_id))
        user = result.scalar_one_or_none()
        if not user:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await state.clear()
            return
        if data["action"] == "add":
            user.balance += abs(amount)
            op = "–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ"
        elif data["action"] == "fine":
            user.balance -= abs(amount)
            op = "—à—Ç—Ä–∞—Ñ"
        elif data["action"] == "corr":
            user.balance += amount
            op = "–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞"
        await session.commit()
    await message.answer(f"–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑–º–µ–Ω—ë–Ω!\n–û–ø–µ—Ä–∞—Ü–∏—è: <b>{op}</b>\n–°—É–º–º–∞: <b>{amount}</b>\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}", parse_mode="HTML")
    # –ú–æ–∂–Ω–æ —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        from aiogram import Bot
        bot: Bot = message.bot
        await bot.send_message(user_id, f"‚ùóÔ∏è–í–∞—à –±–∞–ª–∞–Ω—Å –∏–∑–º–µ–Ω—ë–Ω. –û–ø–µ—Ä–∞—Ü–∏—è: <b>{op}</b>\n–°—É–º–º–∞: <b>{amount}</b>\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}", parse_mode="HTML")
    except Exception:
        pass
    await state.clear() 

@router.callback_query(F.data.regexp(r"^approve_withdraw_\d+_\d+"))
async def approve_withdraw(call: CallbackQuery):
    _, _, user_id, amount = call.data.split('_')
    user_id = int(user_id)
    amount = int(amount)
    log_admin_action(call.from_user.id, "approve_withdraw", f"user_id={user_id}, amount={amount}")
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –∏ –±–∞–ª–∞–Ω—Å (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    from core.db import async_session
    from models.user import User, BalanceHistory
    from datetime import datetime
    async with async_session() as session:
        result = await session.execute(select(User).where(User.id == user_id))
        user = result.scalar_one_or_none()
        if user:
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ —è–≤–Ω–æ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –≤—ã–ø–ª–∞—Ç—É
            hist = BalanceHistory(user_id=user.id, change=0, type="–≤—ã–ø–ª–∞—Ç–∞", comment="–ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞ –∞–¥–º–∏–Ω–æ–º", created_at=datetime.utcnow())
            session.add(hist)
            await session.merge(user)
            await session.commit()
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await call.bot.send_message(user_id, f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ <b>{amount} ‚ÇΩ</b> –æ–¥–æ–±—Ä–µ–Ω–∞! –û–∂–∏–¥–∞–π—Ç–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã. üïì", parse_mode="HTML")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    await call.message.edit_text("–ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª—ë–Ω.")
    await call.answer()

@router.callback_query(F.data.regexp(r"^reject_withdraw_\d+_\d+"))
async def reject_withdraw(call: CallbackQuery):
    _, _, user_id, amount = call.data.split('_')
    user_id = int(user_id)
    amount = int(amount)
    log_admin_action(call.from_user.id, "reject_withdraw", f"user_id={user_id}, amount={amount}")
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ–Ω—å–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    from core.db import async_session
    from models.user import User, BalanceHistory
    from datetime import datetime
    async with async_session() as session:
        result = await session.execute(select(User).where(User.id == user_id))
        user = result.scalar_one_or_none()
        if user:
            user.balance += amount
            hist = BalanceHistory(user_id=user.id, change=amount, type="–æ—Ç–º–µ–Ω–∞ –≤—ã–≤–æ–¥–∞", comment="–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–æ–º", created_at=datetime.utcnow())
            session.add(hist)
            await session.merge(user)
            await session.commit()
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await call.bot.send_message(user_id, f"‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ <b>{amount} ‚ÇΩ</b> –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –°—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –±–∞–ª–∞–Ω—Å.", parse_mode="HTML")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    await call.message.edit_text("–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞, —Å—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã.")
    await call.answer()

@router.callback_query(F.data == "admin_stats")
async def admin_stats(call: CallbackQuery):
    from core.db import async_session
    from models.user import User, BalanceHistory
    from models.job import Job
    from sqlalchemy import select, func, desc
    from datetime import datetime, timedelta
    async with async_session() as session:
        users_count = (await session.execute(select(func.count()).select_from(User))).scalar()
        jobs_count = (await session.execute(select(func.count()).select_from(Job))).scalar()
        active_jobs = (await session.execute(select(func.count()).select_from(Job).where(Job.end_time > datetime.utcnow()))).scalar()
        payouts = (await session.execute(BalanceHistory.__table__.select().where(BalanceHistory.type == "–≤—ã–≤–æ–¥"))).fetchall()
        total_payout = sum(abs(row.change) for row in payouts)
        # –¢–æ–ø-5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –±–∞–ª–∞–Ω—Å—É
        top_balance = (await session.execute(select(User).order_by(desc(User.balance)).limit(5))).scalars().all()
        # –¢–æ–ø-5 –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π (–ø–æ –∏—Å—Ç–æ—Ä–∏–∏ –±–∞–ª–∞–Ω—Å–∞ type='–≤—ã–ø–ª–∞—Ç–∞')
        top_jobs = (await session.execute(
            select(User, func.count(BalanceHistory.id).label('cnt'))
            .join(BalanceHistory, BalanceHistory.user_id == User.id)
            .where(BalanceHistory.type == '–≤—ã–ø–ª–∞—Ç–∞')
            .group_by(User.id)
            .order_by(desc('cnt'))
            .limit(5)
        )).all()
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥ –∑–∞ –º–µ—Å—è—Ü
        month_ago = datetime.utcnow() - timedelta(days=30)
        withdraws_month = (await session.execute(
            select(func.count()).select_from(BalanceHistory)
            .where(BalanceHistory.type == '–≤—ã–≤–æ–¥', BalanceHistory.created_at > month_ago)
        )).scalar()
    text = (f"<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{users_count}</b>\n"
            f"–ó–∞–¥–∞–Ω–∏–π –≤—Å–µ–≥–æ: <b>{jobs_count}</b>\n"
            f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π: <b>{active_jobs}</b>\n"
            f"–í—ã–ø–ª–∞—á–µ–Ω–æ –≤—Å–µ–≥–æ: <b>{total_payout} ‚ÇΩ</b>\n"
            f"–ó–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥ –∑–∞ –º–µ—Å—è—Ü: <b>{withdraws_month}</b>\n\n"
            f"<b>üèÜ –¢–æ–ø-5 –ø–æ –±–∞–ª–∞–Ω—Å—É:</b>\n" +
            ''.join([f"{i+1}. {u.fio or u.tg_id}: <b>{u.balance} ‚ÇΩ</b>\n" for i, u in enumerate(top_balance)]) +
            f"\n<b>üèÖ –¢–æ–ø-5 –ø–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º –∑–∞–¥–∞–Ω–∏—è–º:</b>\n" +
            ''.join([f"{i+1}. {u.fio or u.tg_id}: <b>{cnt}</b>\n" for i, (u, cnt) in enumerate(top_jobs)])
    )
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close_notify")]
    ])
    await call.message.answer(text, reply_markup=kb, parse_mode="HTML")
    await call.answer()

@router.callback_query(F.data == "close_notify")
async def close_notify(call: CallbackQuery):
    try:
        await call.message.delete()
    except Exception:
        pass
    await call.answer() 

class NewsFSM(StatesGroup):
    text = State()
    confirm = State()

@router.callback_query(F.data == "admin_news")
async def start_news(call: CallbackQuery, state: FSMContext):
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")
    await state.set_state(NewsFSM.text)
    await call.answer()

@router.message(NewsFSM.text)
async def news_text(message: Message, state: FSMContext):
    await state.update_data(text=message.text)
    await message.answer(f"<b>–¢–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:</b>\n{message.text}\n\n–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º? (–¥–∞/–Ω–µ—Ç)", parse_mode="HTML")
    await state.set_state(NewsFSM.confirm)

@router.message(NewsFSM.confirm)
async def news_confirm(message: Message, state: FSMContext):
    if message.text.lower() not in ["–¥–∞", "yes", "+"]:
        await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        await state.clear()
        return
    data = await state.get_data()
    from core.db import async_session
    from models.user import User
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    async with async_session() as session:
        result = await session.execute(User.__table__.select().where(User.is_blocked == False, User.is_approved == True))
        users = result.fetchall()
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close_notify")]
    ])
    count = 0
    for row in users:
        try:
            await message.bot.send_message(row.tg_id, data['text'], reply_markup=kb)
            count += 1
        except Exception:
            pass
    await message.answer(f"–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ <b>{count}</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.", parse_mode="HTML")
    await state.clear() 
    log_admin_action(message.from_user.id, "news_broadcast", f"text={data['text']}")

@router.callback_query(F.data == "admin_menu")
async def admin_menu_cb(call: CallbackQuery):
    from keyboards.admin import admin_main_menu
    await call.message.answer("–ê–¥–º–∏–Ω-–º–µ–Ω—é:", reply_markup=admin_main_menu())
    await call.answer() 

@router.callback_query(F.data == "withdraw_requests")
async def show_withdraw_requests(call: CallbackQuery):
    from models.user import BalanceHistory, User
    from sqlalchemy import select, desc
    async with async_session() as session:
        result = await session.execute(
            select(BalanceHistory, User)
            .join(User, User.id == BalanceHistory.user_id)
            .where(BalanceHistory.type == "–≤—ã–≤–æ–¥")
            .order_by(desc(BalanceHistory.created_at))
        )
        rows = result.fetchall()
    if not rows:
        await call.message.answer("<b>–ó–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥ –Ω–µ—Ç.</b> üïì", parse_mode="HTML")
        await call.answer()
        return
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞—è–≤–∫–∏
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"{user.fio or user.tg_id} | {abs(hist.change)}‚ÇΩ | {(hist.created_at + timedelta(hours=3)).strftime('%d.%m %H:%M')} (–ú–°–ö)", callback_data=f"withdraw_info_{hist.id}")]
        for hist, user in rows
    ])
    await call.message.answer("<b>–ó–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥:</b>", reply_markup=kb, parse_mode="HTML")
    await call.answer()

@router.callback_query(F.data.regexp(r"^withdraw_info_\d+"))
async def show_withdraw_info(call: CallbackQuery):
    hist_id = int(call.data.split('_')[-1])
    from models.user import BalanceHistory, User
    from sqlalchemy import select
    async with async_session() as session:
        result = await session.execute(
            select(BalanceHistory, User)
            .join(User, User.id == BalanceHistory.user_id)
            .where(BalanceHistory.id == hist_id)
        )
        row = result.first()
    if not row:
        await call.message.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        await call.answer()
        return
    hist, user = row
    msk_time = hist.created_at + timedelta(hours=3)
    text = (f"<b>–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥</b>\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <b>{user.fio or user.tg_id}</b>\n"
            f"ID: <code>{user.tg_id}</code>\n"
            f"–°—É–º–º–∞: <b>{abs(hist.change)} ‚ÇΩ</b>\n"
            f"–†–µ–∫–≤–∏–∑–∏—Ç—ã: <b>{hist.comment or '-'} </b>\n"
            f"–î–∞—Ç–∞: <b>{msk_time.strftime('%d.%m %H:%M')} (–ú–°–ö)</b>")
    await call.message.answer(text, parse_mode="HTML")
    await call.answer() 

@router.callback_query(F.data == "admin_bulk")
async def admin_bulk(call: CallbackQuery, state: FSMContext):
    async with async_session() as session:
        result = await session.execute(select(User))
        users = result.scalars().all()
    data = await state.get_data()
    selected = data.get("bulk_selected", [])
    buttons = []
    row = []
    for i, u in enumerate(users):
        checked = " ‚úÖ" if u.tg_id in selected else ""
        row.append(InlineKeyboardButton(text=f"{u.fio or u.tg_id}{' üîí' if u.is_blocked else ''}{checked}", callback_data=f"bulkselect_{u.tg_id}"))
        if (i+1) % 3 == 0:
            buttons.append(row)
            row = []
    if row:
        buttons.append(row)
    buttons.append([InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="bulk_continue"), InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_menu"), InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close_notify")])
    await state.update_data(bulk_selected=selected)
    try:
        await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è:", reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))
    except Exception:
        await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è:", reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))
    await call.answer()

@router.callback_query(F.data.startswith("bulkselect_"))
async def bulk_select(call: CallbackQuery, state: FSMContext):
    tg_id = int(call.data.split("_")[1])
    data = await state.get_data()
    selected = data.get("bulk_selected", [])
    if tg_id in selected:
        selected.remove(tg_id)
    else:
        selected.append(tg_id)
    await state.update_data(bulk_selected=selected)
    await call.answer(f"–í—ã–±—Ä–∞–Ω–æ: {len(selected)}")

class BulkMailFSM(StatesGroup):
    text = State()

@router.callback_query(F.data == "bulk_continue")
async def bulk_continue(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    selected = data.get("bulk_selected", [])
    if not selected:
        await call.answer("–ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", show_alert=True)
        return
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data="bulk_block")],
        [InlineKeyboardButton(text="üîì –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data="bulk_unblock")],
        [InlineKeyboardButton(text="üì¢ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="bulk_mail")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_menu")]
    ])
    await call.message.answer(f"–í—ã–±—Ä–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(selected)}. –ö–∞–∫–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å?", reply_markup=kb)
    await call.answer()

@router.callback_query(F.data == "bulk_mail")
async def bulk_mail(call: CallbackQuery, state: FSMContext):
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:")
    await state.set_state(BulkMailFSM.text)
    await call.answer()

@router.message(BulkMailFSM.text)
async def bulk_mail_text(message: Message, state: FSMContext):
    data = await state.get_data()
    selected = data.get("bulk_selected", [])
    text = message.text
    count = 0
    for tg_id in selected:
        try:
            await message.bot.send_message(tg_id, text)
            count += 1
        except Exception:
            pass
    await message.answer(f"–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ <b>{count}</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.", parse_mode="HTML")
    await state.clear()

@router.callback_query(F.data == "bulk_block")
async def bulk_block(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    selected = data.get("bulk_selected", [])
    from models.user import AdminActionLog
    async with async_session() as session:
        for tg_id in selected:
            result = await session.execute(select(User).where(User.tg_id == tg_id))
            user = result.scalar_one_or_none()
            if user:
                user.is_blocked = True
                session.add(AdminActionLog(admin_id=call.from_user.id, user_id=tg_id, action="bulk_block", comment=None))
        await session.commit()
    await call.message.answer(f"–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(selected)}")
    await call.answer()

@router.callback_query(F.data == "bulk_unblock")
async def bulk_unblock(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    selected = data.get("bulk_selected", [])
    from models.user import AdminActionLog
    async with async_session() as session:
        for tg_id in selected:
            result = await session.execute(select(User).where(User.tg_id == tg_id))
            user = result.scalar_one_or_none()
            if user:
                user.is_blocked = False
                user.comment = None
                session.add(AdminActionLog(admin_id=call.from_user.id, user_id=tg_id, action="bulk_unblock", comment=None))
        await session.commit()
    await call.message.answer(f"–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(selected)}")
    await call.answer() 