from aiogram import Router, F
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, InputMediaPhoto, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from services.job_service import create_job, get_jobs, get_job
from services.user_service import get_or_create_user
from core.config import settings
from keyboards.admin import job_list_keyboard, job_users_keyboard, admin_main_menu
from datetime import datetime
from aiogram.filters import StateFilter
import calendar

router = Router()

RU_MONTHS = [
    '', '—è–Ω–≤–∞—Ä—è', '—Ñ–µ–≤—Ä–∞–ª—è', '–º–∞—Ä—Ç–∞', '–∞–ø—Ä–µ–ª—è', '–º–∞—è', '–∏—é–Ω—è',
    '–∏—é–ª—è', '–∞–≤–≥—É—Å—Ç–∞', '—Å–µ–Ω—Ç—è–±—Ä—è', '–æ–∫—Ç—è–±—Ä—è', '–Ω–æ—è–±—Ä—è', '–¥–µ–∫–∞–±—Ä—è'
]

class JobCreate(StatesGroup):
    title = State()
    description = State()
    pay = State()
    start_time = State()
    end_time = State()
    min_age = State()
    max_age = State()
    address = State()
    workers_needed = State()
    photo = State()

CANCEL_INLINE_KB = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_job_create")]])

@router.callback_query(F.data == "create_job")
async def open_create_job(call: CallbackQuery, state: FSMContext):
    await call.answer()
    await start_job_create(call.message, state)

@router.callback_query(F.data == "job_list")
async def show_job_list(call: CallbackQuery):
    jobs = await get_jobs()
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_menu")]
    ])
    if not jobs:
        try:
            await call.message.edit_text("<b>üìú –ù–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π.</b> üóí", reply_markup=kb, parse_mode="HTML")
        except Exception:
            await call.message.answer("<b>üìú –ù–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π.</b> üóí", reply_markup=kb, parse_mode="HTML")
        await call.answer()
        return
    try:
        await call.message.edit_text("<b>üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π:</b> üìã", reply_markup=job_list_keyboard(jobs), parse_mode="HTML")
    except Exception:
        await call.message.answer("<b>üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π:</b> üìã", reply_markup=job_list_keyboard(jobs), parse_mode="HTML")
    await call.answer()

@router.callback_query(F.data.regexp(r"^job_\d+"))
async def show_job_users(call: CallbackQuery):
    job_id = int(call.data.split('_')[1])
    job = await get_job(job_id)
    if not job:
        try:
            await call.message.edit_text("<b>‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!</b> üîç", reply_markup=admin_main_menu(), parse_mode="HTML")
        except Exception:
            await call.message.answer("<b>‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!</b> üîç", reply_markup=admin_main_menu(), parse_mode="HTML")
        await call.answer()
        return
    users = []
    if job.workers:
        for uid in job.workers.split(','):
            if uid:
                user = await get_or_create_user(int(uid))
                users.append(user)
    text = f"<b>üìù –ó–∞–¥–∞–Ω–∏–µ:</b> <b>{job.title}</b>\n<b>üìù –û–ø–∏—Å–∞–Ω–∏–µ:</b> {job.description}\n<b>üí∞ –û–ø–ª–∞—Ç–∞:</b> {job.pay} ‚ÇΩ\n<b>üë• –†–∞–±–æ—Ç–Ω–∏–∫–æ–≤ –Ω—É–∂–Ω–æ:</b> {job.workers_needed}\n<b>‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ:</b> {len(users)}"
    if users:
        text += "\n\n<b>üôã‚Äç‚ôÇÔ∏è –ó–∞–ø–∏—Å–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>"
    else:
        text += "\n\n<b>‚ùå –ù–µ—Ç –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.</b>"
    try:
        await call.message.edit_text(text, reply_markup=job_users_keyboard(job.id, users), parse_mode="HTML")
    except Exception:
        await call.message.answer(text, reply_markup=job_users_keyboard(job.id, users), parse_mode="HTML")
    await call.answer()

@router.callback_query(F.data.regexp(r"^remove_\d+_\d+"))
async def remove_user_from_job(call: CallbackQuery, bot):
    _, job_id, user_id = call.data.split('_')
    job = await get_job(int(job_id))
    if not job:
        try:
            await call.message.edit_text("<b>‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!</b> üîç", reply_markup=admin_main_menu(), parse_mode="HTML")
        except Exception:
            await call.message.answer("<b>‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!</b> üîç", reply_markup=admin_main_menu(), parse_mode="HTML")
        await call.answer()
        return
    # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞
    ids = [uid for uid in job.workers.split(',') if uid and uid != user_id]
    job.workers = ','.join(ids)
    from core.db import async_session
    async with async_session() as session:
        await session.merge(job)
        await session.commit()
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await bot.send_message(int(user_id), f"‚ùóÔ∏è–í—ã –±—ã–ª–∏ —Å–Ω—è—Ç—ã —Å –∑–∞–¥–∞–Ω–∏—è <b>{job.title}</b> –ø–æ –ø—Ä–æ—Å—å–±–µ –∏–ª–∏ —Ä–µ—à–µ–Ω–∏—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
    except Exception:
        pass
    try:
        await call.message.edit_text(f"üôç‚Äç‚ôÇÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <b>{user_id}</b> —Å–Ω—è—Ç —Å –∑–∞–¥–∞–Ω–∏—è!", reply_markup=job_users_keyboard(job.id, [await get_or_create_user(int(uid)) for uid in ids]), parse_mode="HTML")
    except Exception:
        await call.message.answer(f"üôç‚Äç‚ôÇÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <b>{user_id}</b> —Å–Ω—è—Ç —Å –∑–∞–¥–∞–Ω–∏—è!", reply_markup=job_users_keyboard(job.id, [await get_or_create_user(int(uid)) for uid in ids]), parse_mode="HTML")
    await call.answer()

@router.callback_query(F.data == "job_history")
async def show_job_history(call: CallbackQuery):
    jobs = await get_jobs()  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä –ø–æ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–º, –µ—Å–ª–∏ –ø–æ—è–≤–∏—Ç—Å—è —Å—Ç–∞—Ç—É—Å
    if not jobs:
        try:
            await call.message.edit_text("<b>üìú –ò—Å—Ç–æ—Ä–∏—è –∑–∞–¥–∞–Ω–∏–π –ø—É—Å—Ç–∞.</b> üóí", reply_markup=admin_main_menu(), parse_mode="HTML")
        except Exception:
            await call.message.answer("<b>üìú –ò—Å—Ç–æ—Ä–∏—è –∑–∞–¥–∞–Ω–∏–π –ø—É—Å—Ç–∞.</b> üóí", reply_markup=admin_main_menu(), parse_mode="HTML")
        await call.answer()
        return
    for job in jobs:
        users = []
        if job.workers:
            for uid in job.workers.split(','):
                if uid:
                    user = await get_or_create_user(int(uid))
                    users.append(user)
        text = f"<b>üìù –ó–∞–¥–∞–Ω–∏–µ:</b> <b>{job.title}</b>\n<b>üìù –û–ø–∏—Å–∞–Ω–∏–µ:</b> {job.description}\n<b>üìç –ê–¥—Ä–µ—Å:</b> {getattr(job, 'address', '‚Äî')}\n<b>üí∏ –û–ø–ª–∞—Ç–∞:</b> {job.pay} ‚ÇΩ\n<b>üë• –†–∞–±–æ—Ç–Ω–∏–∫–æ–≤ –Ω—É–∂–Ω–æ:</b> {job.workers_needed}\n<b>‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ:</b> {len(users)}"
        if users:
            text += "\n\n<b>üôã‚Äç‚ôÇÔ∏è –£—á–∞—Å—Ç–≤–æ–≤–∞–ª–∏:</b>"
        else:
            text += "\n\n<b>‚ùå –ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.</b>"
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=f"üôç‚Äç‚ôÇÔ∏è {u.fio or u.tg_id}", callback_data=f"profile_{u.tg_id}")] for u in users
        ])
        try:
            await call.message.edit_text(text, reply_markup=kb if users else admin_main_menu(), parse_mode="HTML")
        except Exception:
            await call.message.answer(text, reply_markup=kb if users else admin_main_menu(), parse_mode="HTML")
    await call.answer()

@router.callback_query(F.data.regexp(r"^profile_\d+"))
async def show_user_profile_from_job(call: CallbackQuery):
    tg_id = int(call.data.split('_')[1])
    user = await get_or_create_user(tg_id)
    text = f"<b>–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n<b>–§–ò–û:</b> {user.fio}\n<b>–í–æ–∑—Ä–∞—Å—Ç:</b> {user.age}\n<b>ID:</b> {user.tg_id}"
    await call.message.answer(text)
    await call.answer()

@router.callback_query(F.data == "cancel_job_create")
async def cancel_job_create_cb(call: CallbackQuery, state: FSMContext):
    await state.clear()
    await call.message.edit_text("–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=admin_main_menu(), parse_mode="HTML")
    await call.answer()

@router.message(F.text == "–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ")
async def start_job_create(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:", reply_markup=CANCEL_INLINE_KB)
    await state.set_state(JobCreate.title)

@router.message(JobCreate.title)
async def job_title(message: Message, state: FSMContext):
    await state.update_data(title=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:", reply_markup=CANCEL_INLINE_KB)
    await state.set_state(JobCreate.description)

@router.message(JobCreate.description)
async def job_desc(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–ª–∞—Ç—É –∑–∞ —Å–º–µ–Ω—É (—á–∏—Å–ª–æ):", reply_markup=CANCEL_INLINE_KB)
    await state.set_state(JobCreate.pay)

@router.message(JobCreate.pay)
async def job_pay(message: Message, state: FSMContext):
    await state.update_data(pay=int(message.text))
    await message.answer("–í–≤–µ–¥–∏—Ç–µ <b>—á–∏—Å–ª–æ, –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏ –≤—Ä–µ–º—è –∫–æ–Ω—Ü–∞</b> —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª. –ü—Ä–∏–º–µ—Ä: <b>28 15:00 16:00</b>", parse_mode="HTML", reply_markup=CANCEL_INLINE_KB)
    await state.set_state(JobCreate.start_time)

@router.message(JobCreate.start_time)
async def job_start_time(message: Message, state: FSMContext):
    try:
        parts = message.text.strip().split()
        if len(parts) != 3:
            raise ValueError
        day = int(parts[0])
        start_time = parts[1]
        end_time = parts[2]
        now = datetime.now()
        month = now.month
        year = now.year
        start_dt = datetime.strptime(f"{day}.{month}.{year} {start_time}", "%d.%m.%Y %H:%M")
        end_dt = datetime.strptime(f"{day}.{month}.{year} {end_time}", "%d.%m.%Y %H:%M")
        await state.update_data(start_time=start_dt.strftime('%Y-%m-%d %H:%M'))
        await state.update_data(end_time=end_dt.strftime('%Y-%m-%d %H:%M'))
        await message.answer("–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç?", reply_markup=CANCEL_INLINE_KB)
        await state.set_state(JobCreate.min_age)
    except Exception:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <b>28 15:00 16:00</b> (—á–∏—Å–ª–æ, –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞, –≤—Ä–µ–º—è –∫–æ–Ω—Ü–∞)", parse_mode="HTML", reply_markup=CANCEL_INLINE_KB)

@router.message(JobCreate.min_age)
async def job_min_age(message: Message, state: FSMContext):
    if not message.text.isdigit() or int(message.text) < 16:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º (–æ—Ç 16):", reply_markup=CANCEL_INLINE_KB)
        return
    await state.update_data(min_age=int(message.text))
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –¥–ª—è –∑–∞–¥–∞–Ω–∏—è (–∏–ª–∏ '-' –µ—Å–ª–∏ –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ):", reply_markup=CANCEL_INLINE_KB)
    await state.set_state(JobCreate.max_age)

@router.message(JobCreate.max_age)
async def job_max_age(message: Message, state: FSMContext):
    if message.text == '-' or message.text == "0":
        await state.update_data(max_age=99)
    elif not message.text.isdigit() or int(message.text) < 16:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º (–æ—Ç 16) –∏–ª–∏ '-' –µ—Å–ª–∏ –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ:", reply_markup=CANCEL_INLINE_KB)
        return
    else:
        await state.update_data(max_age=int(message.text))
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∑–∞–¥–∞–Ω–∏—è:", reply_markup=CANCEL_INLINE_KB)
    await state.set_state(JobCreate.address)

@router.message(JobCreate.address)
async def job_address(message: Message, state: FSMContext):
    await state.update_data(address=message.text)
    await message.answer("–°–∫–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤?", reply_markup=CANCEL_INLINE_KB)
    await state.set_state(JobCreate.workers_needed)

@router.message(JobCreate.workers_needed)
async def job_workers(message: Message, state: FSMContext):
    await state.update_data(workers_needed=int(message.text))
    await message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç'):", reply_markup=CANCEL_INLINE_KB)
    await state.set_state(JobCreate.photo)

@router.message(JobCreate.photo, F.photo)
async def job_photo(message: Message, state: FSMContext):
    photo_id = message.photo[-1].file_id
    await finish_job_create(message, state, photo_id)

@router.message(JobCreate.photo)
async def job_no_photo(message: Message, state: FSMContext):
    if message.text.lower() == '–Ω–µ—Ç':
        await finish_job_create(message, state, None)
    else:
        await message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç'", reply_markup=CANCEL_INLINE_KB)

async def finish_job_create(message: Message, state: FSMContext, photo_id):
    data = await state.get_data()
    job = await create_job(
        title=data['title'],
        description=data['description'],
        pay=data['pay'],
        start_time=datetime.strptime(data['start_time'], '%Y-%m-%d %H:%M'),
        end_time=datetime.strptime(data['end_time'], '%Y-%m-%d %H:%M'),
        min_age=data['min_age'],
        max_age=data['max_age'],
        address=data['address'],
        photo=photo_id,
        workers_needed=data['workers_needed']
    )
    from core.config import settings
    group_message_id = None
    if settings.WORKERS_CHAT_ID:
        total = job.workers_needed
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
        day = job.start_time.day
        month = RU_MONTHS[job.start_time.month]
        start_time_str = job.start_time.strftime('%H:%M')
        end_time_str = job.end_time.strftime('%H:%M')
        date_str = f"{day} {month} {start_time_str} - {end_time_str}"
        text = (f"<b>üìù –ù–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ!</b>\n"
                f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {job.title}\n"
                f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {job.description}\n"
                f"<b>–ê–¥—Ä–µ—Å:</b> {job.address}\n"
                f"<b>–û–ø–ª–∞—Ç–∞:</b> {job.pay} ‚ÇΩ\n"
                f"<b>–í–æ–∑—Ä–∞—Å—Ç:</b> {job.min_age} - {job.max_age if job.max_age != 99 else '–±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π'}\n"
                f"<b>–í—Ä–µ–º—è:</b> {date_str}\n"
                f"<b>–ú–µ—Å—Ç:</b> {total}")
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
        # –ö–Ω–æ–ø–∫–∞-—Å—Å—ã–ª–∫–∞ –Ω–∞ –±–æ—Ç–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º job_id
        bot_username = settings.BOT_USERNAME  # –≤—Å–µ–≥–¥–∞ –±–µ–∑ @
        deep_link = f"https://t.me/{bot_username}?start=job_{job.id}"
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úã –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", url=deep_link)]
        ])
        bot = message.bot
        try:
            if photo_id:
                sent = await bot.send_photo(settings.WORKERS_CHAT_ID, photo_id, caption=text, reply_markup=kb, parse_mode="HTML")
                group_message_id = sent.message_id
            else:
                sent = await bot.send_message(settings.WORKERS_CHAT_ID, text, reply_markup=kb, parse_mode="HTML")
                group_message_id = sent.message_id
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç: {e}")
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id –≤ Job
    if group_message_id:
        from core.db import async_session
        async with async_session() as session:
            job.group_message_id = group_message_id
            await session.merge(job)
            await session.commit()
    # –†–∞—Å—Å—ã–ª–∫–∞ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    from core.db import async_session
    from models.user import User
    async with async_session() as session:
        result = await session.execute(User.__table__.select().where(User.is_subscribed == True, User.is_blocked == False, User.is_approved == True))
        users = result.fetchall()
    for row in users:
        try:
            await message.bot.send_message(row.tg_id, f"<b>–ù–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ!</b>\n{job.title}\n{job.description}", parse_mode="HTML")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {row.tg_id}: {e}")
    await message.answer("–ó–∞–¥–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!", reply_markup=admin_main_menu(), parse_mode="HTML")
    await state.clear()

@router.callback_query(F.data.regexp(r"^delete_job_\d+"))
async def confirm_delete_job(call: CallbackQuery):
    job_id = int(call.data.split('_')[-1])
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùóÔ∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ", callback_data=f"delete_job_confirm_{job_id}")],
        [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data=f"job_{job_id}")]
    ])
    try:
        await call.message.edit_text("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ <b>–Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ</b>!", reply_markup=kb, parse_mode="HTML")
    except Exception:
        await call.message.answer("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ <b>–Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ</b>!", reply_markup=kb, parse_mode="HTML")
    await call.answer()

@router.callback_query(F.data.regexp(r"^delete_job_confirm_\d+"))
async def delete_job(call: CallbackQuery):
    job_id = int(call.data.split('_')[-1])
    from services.job_service import get_job
    from core.db import async_session
    job = await get_job(job_id)
    if not job:
        try:
            await call.message.edit_text("–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ.", reply_markup=admin_main_menu(), parse_mode="HTML")
        except Exception:
            await call.message.answer("–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ.", reply_markup=admin_main_menu(), parse_mode="HTML")
        await call.answer()
        return
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
    if hasattr(job, 'group_message_id') and job.group_message_id:
        from core.config import settings
        bot = call.bot
        try:
            await bot.delete_message(settings.WORKERS_CHAT_ID, job.group_message_id)
        except Exception:
            pass
    async with async_session() as session:
        await session.delete(job)
        await session.commit()
    try:
        await call.message.edit_text("üóë <b>–ó–∞–¥–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ!</b>", parse_mode="HTML", reply_markup=admin_main_menu())
    except Exception:
        await call.message.answer("üóë <b>–ó–∞–¥–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ!</b>", parse_mode="HTML", reply_markup=admin_main_menu())
    await call.answer() 