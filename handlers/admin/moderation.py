from aiogram import Router
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton
from sqlalchemy.future import select
from core.db import async_session
from models.user import User
from keyboards.admin import moderation_keyboard
from keyboards.user import user_main_menu
from services.user_service import update_user_status
from core.config import settings
from aiogram import F

router = Router()

@router.callback_query(lambda c: c.data == "moderation")
async def open_moderation(call: CallbackQuery):
    await call.answer()
    await show_moderation(call.message)

@router.message(lambda m: m.text == "–ú–æ–¥–µ—Ä–∞—Ü–∏—è")
async def show_moderation(message: Message):
    async with async_session() as session:
        result = await session.execute(select(User).where(User.is_approved == False, User.is_blocked == False))
        users = result.scalars().all()
        users = [u for u in users if u.fio and u.age]
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_menu")]
        ])
        if not users:
            try:
                await message.edit_text("<b>üïµÔ∏è‚Äç‚ôÇÔ∏è –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏.</b>", reply_markup=kb, parse_mode="HTML")
            except Exception:
                await message.answer("<b>üïµÔ∏è‚Äç‚ôÇÔ∏è –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏.</b>", reply_markup=kb, parse_mode="HTML")
            return
        for user in users:
            text = f"<b>üë§ –§–ò–û:</b> {user.fio}\n<b>üéÇ –í–æ–∑—Ä–∞—Å—Ç:</b> {user.age}"
            if user.passport_photo:
                await message.bot.send_photo(
                    message.chat.id,
                    user.passport_photo,
                    caption=text,
                    reply_markup=moderation_keyboard(user.tg_id),
                    parse_mode="HTML"
                )
            else:
                await message.answer(text, reply_markup=moderation_keyboard(user.tg_id), parse_mode="HTML")

@router.callback_query(F.data.regexp(r"^approve_\d+$"))
async def approve_user(call: CallbackQuery, bot):
    tg_id = int(call.data.split("_")[1])
    await update_user_status(tg_id, is_approved=True)
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try:
        invite_text = "<b>üéâ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!</b> –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞!"
        if settings.WORKERS_CHAT_ID:
            chat_link = str(settings.WORKERS_CHAT_LINK)
            invite_text += f"\n\n–í–∞—Å –ø—Ä–∏–≥–ª–∞—à–∞—é—Ç –≤ —Ä–∞–±–æ—á–∏–π —á–∞—Ç! <b>{chat_link}</b>"
        await bot.send_message(tg_id, invite_text, reply_markup=user_main_menu(), parse_mode="HTML", disable_web_page_preview=True)
    except Exception as e:
        print(f"[approve_user] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {tg_id}: {e}")
    if call.message.photo or call.message.document:
        try:
            await call.message.delete()
        except Exception:
            pass
        await call.message.answer("‚úÖ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–¥–æ–±—Ä–µ–Ω.</b>", parse_mode="HTML")
    else:
        await call.message.edit_text("‚úÖ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–¥–æ–±—Ä–µ–Ω.</b>", parse_mode="HTML")

@router.callback_query(F.data.regexp(r"^reject_\d+$"))
async def reject_user(call: CallbackQuery, bot):
    tg_id = int(call.data.split("_")[1])
    await update_user_status(tg_id, is_approved=False, is_blocked=True)
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try:
        await bot.send_message(tg_id, "‚ùå <b>–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.</b> –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–¥–∞—á–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.", parse_mode="HTML")
    except Exception:
        pass
    if call.message.photo or call.message.document:
        try:
            await call.message.delete()
        except Exception:
            pass
        await call.message.answer("‚ùå <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª–æ–Ω—ë–Ω.</b>", parse_mode="HTML")
    else:
        await call.message.edit_text("‚ùå <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª–æ–Ω—ë–Ω.</b>", parse_mode="HTML")

@router.message(F.text == "üõ† –ê–¥–º–∏–Ω-–º–µ–Ω—é")
async def admin_menu_text(message: Message):
    from keyboards.admin import admin_main_menu
    await message.answer("–ê–¥–º–∏–Ω-–º–µ–Ω—é:", reply_markup=admin_main_menu()) 