from aiogram import BaseMiddleware
from aiogram.types import Message, CallbackQuery
from core.config import settings
from services.user_service import get_or_create_user
from datetime import datetime

class AccessMiddleware(BaseMiddleware):
    def __init__(self, admin_only=False, approved_only=False):
        self.admin_only = admin_only
        self.approved_only = approved_only
        super().__init__()

    async def __call__(self, handler, event, data):
        user_id = None
        if isinstance(event, Message):
            user_id = event.from_user.id
        elif isinstance(event, CallbackQuery):
            user_id = event.from_user.id
        if user_id is None:
            return await handler(event, data)
        user = await get_or_create_user(user_id)
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞, –µ—Å–ª–∏ –µ—Å—Ç—å comment —Å unblock_at
        if user.is_blocked and user.comment and user.comment.startswith("unblock_at:"):
            try:
                unblock_time = datetime.fromisoformat(user.comment.split(":", 1)[1])
                if datetime.utcnow() >= unblock_time:
                    # –°–Ω–∏–º–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
                    from services.user_service import update_user_status
                    await update_user_status(user.tg_id, is_blocked=False, comment=None)
                    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    if isinstance(event, Message):
                        await event.answer("–í–∞—à–∞ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Å–Ω—è—Ç–∞. –í—ã —Å–Ω–æ–≤–∞ –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º! üéâ")
                    elif isinstance(event, CallbackQuery):
                        await event.answer("–í–∞—à–∞ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Å–Ω—è—Ç–∞. –í—ã —Å–Ω–æ–≤–∞ –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º! üéâ", show_alert=True)
                    user.is_blocked = False
                    user.comment = None
            except Exception:
                pass
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        if user.is_blocked:
            if isinstance(event, Message):
                await event.answer("–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            elif isinstance(event, CallbackQuery):
                await event.answer("–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã.", show_alert=True)
            return
        # –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
        if self.admin_only and not (user.is_admin or user_id in settings.ADMIN_IDS):
            if isinstance(event, Message):
                await event.answer("–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
            elif isinstance(event, CallbackQuery):
                await event.answer("–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.", show_alert=True)
            return
        # –¢–æ–ª—å–∫–æ –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö
        if self.approved_only and not user.is_approved:
            if isinstance(event, Message):
                await event.answer("–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏.")
            elif isinstance(event, CallbackQuery):
                await event.answer("–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏.", show_alert=True)
            return
        return await handler(event, data) 